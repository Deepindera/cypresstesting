name: Build, Test, and Deploy to EC2

on:
  push:
    branches:
      - main  # Trigger only when pushing to the main branch

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.Generate_tag_based_on_timestamp.outputs.TAG }}  # Output the generated tag for later use

    steps:
      # Step 1: Checkout the repository
      - name: "Step 1: Checkout the repository"
        uses: actions/checkout@v2

      # Step 2: Set environment variable for exit after testing
      - name: "Step 2: Set environment variable for exit after testing"
        run: echo "STAY_ALIVE=false" >> $GITHUB_ENV
        
      # Step 3: Set up Docker
      - name: "Step 3: Set up Docker"
        uses: docker/setup-buildx-action@v2

      # Step 4: Check Docker Buildx Platforms
      - name: "Step 4: Check Docker Buildx Platforms"
        run: |
          docker buildx ls

      # Step 5: Set the builder context for multi-platform support
      - name: "Step 5: Set Docker Buildx Builder"
        run: |
          docker buildx create --use
          docker buildx ls  # Verify the new builder is active

      # Step 6: Generate a unique tag based on timestamp for the new image version
      - name: "Step 6: Generate tag based on timestamp"
        id: Generate_tag_based_on_timestamp
        run: |
          TAG=$(date +'%Y%m%d%H%M%S')  # Generate a unique tag based on timestamp
          echo "Generated tag: $TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV  # Output the tag correctly to use it in the next steps
          echo "TAG=$TAG" >> $GITHUB_OUTPUT  # Proper way to export output in GitHub Actions

      # Step 7: Build the Docker image (Ensure it's tagged correctly)
      - name: "Step 7: Build Docker image"
        run: |
          docker buildx build --load -t weatherapp:${{ steps.Generate_tag_based_on_timestamp.outputs.TAG }} .  # Build the image with the dynamic tag
          docker images  # List Docker images to check if weatherapp exists

      # Step 8: Run the container and execute start.sh (runs the tests as well)
      - name: "Step 8: Run the Docker container and execute start.sh"
        run: |
          docker run --rm weatherapp:${{ steps.Generate_tag_based_on_timestamp.outputs.TAG }} /bin/bash -c "/app/start.sh"  # Running your full start.sh script

      # Step 9: Save Docker image to a tarball
      - name: "Step 9: Save Docker image to a tarball"
        run: |
          docker save weatherapp:${{ steps.Generate_tag_based_on_timestamp.outputs.TAG }} -o weatherapp.tar
          echo "Saved Docker image as weatherapp.tar"
      
      # Step 10: Upload Docker image tarball
      - name: "Step 10: Upload Docker image tarball"
        uses: actions/upload-artifact@v4  # Correct version
        with:
          name: weatherapp-image
          path: weatherapp.tar

  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: success()  # Only run if the build_and_test job is successful

    steps:
      # Step 11: Download Docker image tarball
      - name: "Step 11: Download Docker image tarball"
        uses: actions/download-artifact@v4
        with:
          name: weatherapp-image

      # Step 12: Load Docker image from tarball
      - name: "Step 12: Load Docker image from tarball"
        run: |
          docker load -i weatherapp.tar
          echo "Loaded Docker image"

      # Step 13: Checkout the repository (move this after the Docker load step)
      - name: "Step 13: Checkout the repository"
        uses: actions/checkout@v2

      # Step 14: Set up AWS CLI
      - name: "Step 14: Set up AWS CLI"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-southeast-2'  # AWS region for your ECR

      # Step 15: Authenticate to AWS ECR
      - name: "Step 15: Login to Amazon ECR"
        run: |
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com

      # Step 16: Verify Docker images before tagging
      - name: "Step 16: Verify Docker images before tagging"
        run: |
          docker images  # List Docker images to ensure weatherapp exists

      # Step 17: Tag Docker image with timestamp
      - name: "Step 17: Tag Docker image with timestamp"
        run: |
          docker tag weatherapp:${{ needs.build_and_test.outputs.tag }} 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ needs.build_and_test.outputs.tag }}
          echo "Tagged image with: ${{ needs.build_and_test.outputs.tag }}"

      # Step 18: Push Docker image to ECR
      - name: "Step 18: Push Docker image to ECR"
        run: |
          docker push 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ needs.build_and_test.outputs.tag }}
          echo "Pushed image with tag: ${{ needs.build_and_test.outputs.tag }}"

      # Step 19: Decode private key from GitHub Secrets
      - name: "Step 19: Decode private key from GitHub Secrets"
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > private-key.pem
          chmod 600 private-key.pem  # Set appropriate permissions for the private key file

      # Step 20: Clean up old Docker containers, images, and volumes
      - name: "Step 20: Clean up old Docker containers, images, and volumes"
        run: |
          # Stop and remove all containers (if they exist)
          docker ps -q | xargs -r docker stop || true
          docker ps -a -q | xargs -r docker rm || true

          # Remove all unused Docker images
          docker image prune -af

          # Remove all unused volumes
          docker volume prune -f

          # Remove all unused networks
          docker network prune -f

          # Prune the entire Docker system to remove everything not in use
          docker system prune -af

          # Check disk usage to ensure space has been freed
          df -h

      # Step 21: Deploy to EC2
      - name: "Step 21: Deploy to EC2"
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            # Authenticate Docker with AWS ECR
            aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com && 
            # Pull the Docker image
            docker pull 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ needs.build_and_test.outputs.tag }} && 
            # Stop the existing container if it exists
            docker stop weatherapp-container || true && 
            # Remove the old container if it exists
            docker rm weatherapp-container || true && 
            # Run the new container
            docker run -d --name weatherapp-container -p 3000:3000 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ needs.build_and_test.outputs.tag }}
          "

  notify_on_failure:
    if: failure()  # This job runs only if the previous jobs fail
    runs-on: ubuntu-latest

    steps:
      - name: "Send failure email notification"
        uses: dawidd6/action-send-mail@v3
        with:
          smtp-server: smtp.gmail.com
          smtp-port: 587
          smtp-username: ${{ secrets.GMAIL_USERNAME }}
          smtp-password: ${{ secrets.GMAIL_PASSWORD }}
          from: ${{ secrets.GMAIL_USERNAME }}
          to: your-email@example.com
          subject: "Build Failed: Test Run for Build ID ${{ github.run_id }}"
          body: "The build and deploy for Build ID ${{ github.run_id }} have failed. Please check the logs for more details."
