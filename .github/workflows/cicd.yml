name: Build, Test, and Deploy to EC2

on:
  push:
    branches:
      - main  # Trigger only when pushing to the main branch

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    # Set up Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    # Build the Docker image (Ensure it's named correctly)
    - name: Build Docker image
      run: |
        docker build -t weatherapp .  # Build the image and tag it as weatherapp
        docker images  # Debugging: List the built Docker images to check if weatherapp exists

    # Run the container and execute start.sh (runs the tests as well)
    - name: Run the Docker container and execute start.sh
      run: |
        docker run --rm weatherapp /bin/bash -c "/app/start.sh"  # Running your full start.sh script

  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: success()  # Only run if the build_and_test job is successful

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    # Set up AWS CLI
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'ap-southeast-2'  # AWS region for your ECR

    # Authenticate to AWS ECR
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com

    # Generate a unique tag based on timestamp for the new image version
    - name: Generate a unique tag based on timestamp
      run: |
        TAG=$(date +'%Y%m%d%H%M%S')  # Generate a unique tag based on timestamp
        echo "Generated tag: $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV  # Store the tag for later use in the workflow

    # Debugging: Check the images before tagging (this will confirm if weatherapp exists)
    - name: Verify Docker images before tagging
      run: |
        docker images  # List Docker images to ensure weatherapp exists

    # Tag the Docker image using the timestamp tag (e.g., 20250211233125)
    - name: Tag Docker image with timestamp
      run: |
        docker tag weatherapp 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ env.TAG }}
        echo "Tagged image with: ${{ env.TAG }}"

    # Push the Docker image to ECR with the new tag
    - name: Push Docker image to ECR
      run: |
        docker push 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ env.TAG }}
        echo "Pushed image with tag: ${{ env.TAG }}"

    # Deploy to EC2
    - name: Deploy to EC2
      run: |
        ssh -i /path/to/your/private-key.pem ec2-user@<your-ec2-public-ip> <<EOF
          docker pull 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ env.TAG }}
          docker stop weatherapp-container || true
          docker rm weatherapp-container || true
          docker run -d --name weatherapp-container -p 3000:3000 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ env.TAG }}
        EOF

  notify_on_failure:
    if: failure()  # This job runs only if the previous jobs fail
    runs-on: ubuntu-latest

    steps:
    - name: Send failure email notification
      uses: dawidd6/action-send-mail@v3
      with:
        smtp-server: smtp.gmail.com
        smtp-port: 587
        smtp-username: ${{ secrets.GMAIL_USERNAME }}
        smtp-password: ${{ secrets.GMAIL_PASSWORD }}
        from: ${{ secrets.GMAIL_USERNAME }}
        to: your-email@example.com
        subject: "Build Failed: Test Run for Build ID ${{ github.run_id }}"
        body: "The Cypress tests for Build ID ${{ github.run_id }} have failed. Please check the logs for more details."

