name: Build, Test, and Deploy to EC2

on:
  push:
    branches:
      - main  # Trigger only when pushing to the main branch

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.Generate_tag_based_on_timestamp.outputs.TAG }}  # Output the generated tag for later use

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Generate a unique tag based on timestamp for the new image version
      - name: Generate tag based on timestamp
        id: Generate_tag_based_on_timestamp
        run: |
          TAG=$(date +'%Y%m%d%H%M%S')  # Generate a unique tag based on timestamp
          echo "Generated tag: $TAG"
          echo "TAG=$TAG" >> $GITHUB_OUTPUT  # Output the tag so it can be used in other jobs

      # Build the Docker image (Ensure it's tagged correctly)
      - name: Build Docker image
        run: |
          docker build -t weatherapp:${{ steps.Generate_tag_based_on_timestamp.outputs.TAG }} .  # Build the image with the dynamic tag
          docker images  # List Docker images to check if weatherapp exists

      # Run the container and execute start.sh (runs the tests as well)
      - name: Run the Docker container and execute start.sh
        run: |
          docker run --rm weatherapp:${{ steps.Generate_tag_based_on_timestamp.outputs.TAG }} /bin/bash -c "/app/start.sh"  # Running your full start.sh script

      - name: Save Docker image to a tarball
        run: |
          docker save weatherapp:${{ steps.Generate_tag_based_on_timestamp.outputs.TAG }} -o weatherapp.tar
          echo "Saved Docker image as weatherapp.tar"
      
      - name: Upload Docker image tarball
        uses: actions/upload-artifact@v4  # Correct version
        with:
          name: weatherapp-image
          path: weatherapp.tar

  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: success()  # Only run if the build_and_test job is successful

    steps:
      - name: Download Docker image tarball
        uses: actions/download-artifact@v4
        with:
          name: weatherapp-image

      # Load Docker image from tarball
      - name: Load Docker image from tarball
        run: |
          docker load -i weatherapp.tar
          echo "Loaded Docker image"

      # Checkout the repository (move this after the Docker load step)
      - name: Checkout the repository
        uses: actions/checkout@v2

      # Set up AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-southeast-2'  # AWS region for your ECR

      # Authenticate to AWS ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com

      # Debugging: Check the images before tagging (this will confirm if weatherapp exists)
      - name: Verify Docker images before tagging
        run: |
          docker images  # List Docker images to ensure weatherapp exists

      # Verify Docker images before tagging (Deploy Job)
      - name: Verify Docker images before tagging (Deploy Job)
        run: |
          docker images

      # Tag the Docker image using the timestamp tag (e.g., 20250211233125)
      - name: Tag Docker image with timestamp
        run: |
          docker tag weatherapp:${{ needs.build_and_test.outputs.tag }} 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ needs.build_and_test.outputs.tag }}
          echo "Tagged image with: ${{ needs.build_and_test.outputs.tag }}"

      # Push the Docker image to ECR with the new tag
      - name: Push Docker image to ECR
        run: |
          docker push 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ needs.build_and_test.outputs.tag }}
          echo "Pushed image with tag: ${{ needs.build_and_test.outputs.tag }}"

      # Decode the private key from GitHub Secrets
      - name: Decode private key from GitHub Secrets
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > private-key.pem
          chmod 600 private-key.pem  # Set appropriate permissions for the private key file

      # Deploy to EC2 with your SSH command
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            # Authenticate Docker with AWS ECR
            aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com && 
            # Pull the Docker image
            docker pull 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ needs.build_and_test.outputs.tag }} && 
            # Stop the existing container if it exists
            docker stop weatherapp-container || true && 
            # Remove the old container if it exists
            docker rm weatherapp-container || true && 
            # Run the new container
            docker run --platform linux/arm64 -d --name weatherapp-container -p 3000:3000 503561410165.dkr.ecr.ap-southeast-2.amazonaws.com/weatherapp:${{ needs.build_and_test.outputs.tag }}"
          "

  notify_on_failure:
    if: failure()  # This job runs only if the previous jobs fail
    runs-on: ubuntu-latest

    steps:
      - name: Send failure email notification
        uses: dawidd6/action-send-mail@v3
        with:
          smtp-server: smtp.gmail.com
          smtp-port: 587
          smtp-username: ${{ secrets.GMAIL_USERNAME }}
          smtp-password: ${{ secrets.GMAIL_PASSWORD }}
          from: ${{ secrets.GMAIL_USERNAME }}
          to: your-email@example.com
          subject: "Build Failed: Test Run for Build ID ${{ github.run_id }}"
          body: "The build and deploy for Build ID ${{ github.run_id }} have failed. Please check the logs for more details."
